<?php

namespace common\models;

use Yii;
use yii\alexposseda\fileManager\FileManager;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "vps_product".
 *
 * @property integer $id
 * @property string $name
 * @property string $icon
 * @property string $gallery
 * @property string $price
 * @property string $description
 * @property integer $stock
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property ActionProduct[] $actionProducts
 * @property CategoryProduct[] $categoryProducts
 * @property OptionProduct[] $optionProducts
 * @property OrderDetail[] $orderDetails
 */
class Product extends ActiveRecord
{
    public $categories;
    public $options;

    public function afterFind()
    {
        if (is_null($this->categories)) $this->categories = [];
        foreach ($this->categoryProducts as $categoryProduct) {
            array_push($this->categories, $categoryProduct->category_id);
        }
        if (is_null($this->options)) $this->options = [];
        foreach ($this->optionProducts as $optionProduct) {
            array_push($this->options, $optionProduct->option_id);
        }

    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        //clear icon session
        $icon = json_decode($this->icon);
        if (!empty($icon)) {
            FileManager::getInstance()
                ->removeFromSession($icon[0]);
        }
        //clear gallery session
        $gallery = json_decode($this->gallery);
        if (!empty($gallery)) {
            foreach ($gallery as $img) {
                FileManager::getInstance()
                    ->removeFromSession($img);
            }
        }
        //save options
        if (!empty($this->options)) {
            foreach ($this->options as $option_id) {
                if (!$this->getOptionProducts()->where(['option_id' => $option_id])->exists()) {
                    $opt_prod = new OptionProduct(['product_id' => $this->id, 'option_id' => $option_id]);
                    $opt_prod->save();
                }
            }
        }
        //remove unselected option
        $tmp_op = $this->getOptionProducts()->where(['not in','option_id',$this->options])->all();
        foreach ($tmp_op as $op) {
            $op->delete();
        }

        //save categories
        if (!empty($this->categories)) {
            foreach ($this->categories as $category_id) {
                if (!$this->getCategoryProducts()->where(['category_id' => $category_id])->exists()) {
                    $cat_prod = new CategoryProduct(['product_id' => $this->id, 'category_id' => $category_id]);
                    $cat_prod->save();
                }
            }
        }
        //remove unselected categories
        $tmp_cat = $this->getCategoryProducts()->where(['not in','category_id',$this->categories])->all();
        foreach ($tmp_cat as $cat) {
            $cat->delete();
        }
    }

    /**
     * Return src to icon
     * @return string
     */
    public function getIcon()
    {
        $icon = json_decode($this->icon);
        return FileManager::getInstance()->getStorageUrl() . (!empty($icon[0]) ? $icon[0] : 'no_image.jpg');
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'vps_product';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'price', 'description'], 'required'],
            [['gallery', 'description'], 'string'],
            [['price', 'stock'], 'number', 'min' => 0],
            [['created_at', 'updated_at'], 'integer'],
            [['name', 'icon'], 'string', 'max' => 255],
            ['stock', 'default', 'value' => 0],
            [['options', 'categories'], 'safe'],
            [['name'], 'unique'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'icon' => 'Icon',
            'gallery' => 'Gallery',
            'price' => 'Price',
            'description' => 'Description',
            'stock' => 'Stock',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getActionProducts()
    {
        return $this->hasMany(ActionProduct::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategoryProducts()
    {
        return $this->hasMany(CategoryProduct::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOptionProducts()
    {
        return $this->hasMany(OptionProduct::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrderDetails()
    {
        return $this->hasMany(OrderDetail::className(), ['product_id' => 'id']);
    }
}
